{"version":3,"sources":["context/noteContext.js","Components/NoteForm.js","Components/Note.js","Components/NoteList.js","reducers/noteReducer.js","App.js","serviceWorker.js","index.js"],"names":["NoteContext","React","createContext","NoteForm","_useState","useState","_useState2","Object","slicedToArray","noteTitle","setNoteTitle","_useState3","_useState4","noteBody","setNoteBody","_useState5","_useState6","noteColor","setNoteColor","notesDispatch","useContext","react_default","a","createElement","action","className","onSubmit","e","preventDefault","type","id","uuid","title","body","color","alert","htmlFor","name","placeholder","value","onChange","target","cols","rows","Note","_ref","note","editedBody","setEditedBody","editedNoteColor","setEditedNoteColor","isEditing","setIsEditing","style","background","onClick","NoteList","notes","map","Fragment","Components_Note","key","noteReducer","state","console","log","concat","toConsumableArray","filter","objectSpread","App","_useReducer","useReducer","_useReducer2","noteContext","Provider","Components_NoteForm","Components_NoteList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4952989.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst NoteContext = React.createContext()\r\n\r\nexport default NoteContext","import React, { useContext, useState} from 'react';\r\nimport NoteContext from '../context/noteContext'\r\nimport uuid from 'uuid/v4'\r\n\r\nconst NoteForm = () => {\r\n    const [noteTitle, setNoteTitle] = useState('')\r\n    const [noteBody, setNoteBody] = useState('')\r\n    const [noteColor, setNoteColor] = useState('')\r\n\r\n    const { notesDispatch } = useContext(NoteContext)\r\n\r\n    const handleFormSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (noteTitle === '' || noteBody === '' || noteColor === '') {\r\n            alert('Please complete all fields')\r\n            return\r\n        }\r\n\r\n\r\n        notesDispatch({type: 'ADD_NOTE', id: uuid(), title: noteTitle, body: noteBody, color: noteColor})\r\n\r\n        setNoteTitle('')\r\n        setNoteBody('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Add Note</h2>\r\n            <form action=\"\" className='noteForm' onSubmit={handleFormSubmit}>\r\n                <div className=\"noteTitleContainer\">\r\n                    <label htmlFor=\"noteTitle\">\r\n                        Note Title:\r\n                    </label>\r\n                    <input \r\n                    type=\"text\" \r\n                    name=\"noteTitle\" \r\n                    id=\"noteTitle\"\r\n                    placeholder=\"Note Title\"\r\n                    value={noteTitle}\r\n                    onChange={(e) => {setNoteTitle(e.target.value)}}\r\n                    />\r\n                \r\n                </div>\r\n                <div className=\"noteColorContainer\">\r\n                    <label htmlFor=\"colorSelect\">Select Note Color:</label>\r\n                    <select name=\"colorSelect\" id=\"colorSelect\" onChange={(e) => setNoteColor(e.target.value)} value={noteColor}>\r\n                        <option value=\"\">Select Color</option>\r\n                        <option value=\"lightcoral\">Red</option>\r\n                        <option value=\"lightblue\">Blue</option>\r\n                        <option value=\"lightgreen\">Green</option>\r\n                        <option value=\"violet\">Purple</option>\r\n                        <option value=\"orange\">Orange</option>\r\n                    </select>\r\n                </div>\r\n                    <label htmlFor=\"noteBody\" className='textAreaLabel'>\r\n                        Enter Note:\r\n                    </label>\r\n                \r\n                <textarea \r\n                name=\"noteBody\" \r\n                id=\"noteBody\" \r\n                cols=\"30\" \r\n                rows=\"10\" \r\n                value={noteBody}\r\n                onChange={(e) => {setNoteBody(e.target.value)}}\r\n                >   \r\n                </textarea>\r\n                <button className=\"submit\">Add note</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NoteForm;","import React, { useContext, useState } from 'react'\r\nimport NoteContext from '../context/noteContext'\r\n\r\nconst Note = ({ note }) => {\r\n    const [editedBody, setEditedBody] = useState('')\r\n    const [editedNoteColor, setEditedNoteColor] = useState(note.color)\r\n    const [isEditing, setIsEditing] = useState(false)\r\n\r\n    const { notesDispatch } = useContext(NoteContext)\r\n\r\n    const handleDeleteNote = () => {\r\n        notesDispatch({type: 'DELETE_NOTE', id: note.id})\r\n    }\r\n\r\n    const handleEditFormSubmit = (e) => {\r\n        e.preventDefault()\r\n        notesDispatch({type: 'EDIT_NOTE', id: note.id, body: editedBody, color: editedNoteColor})\r\n\r\n        setIsEditing(false)\r\n    }\r\n\r\n    return (\r\n        <div className='note' style={{background : note.color}}>\r\n            <h3>{note.title}</h3>\r\n            <p>{note.body}</p>\r\n            {!isEditing ? \r\n                <button className=\"edit\" onClick={() => {setIsEditing(true)}}>Edit</button> : \r\n                <button className='cancel' onClick={() => {setIsEditing(false)}}>Cancel</button>}\r\n            <button className=\"delete\" onClick={handleDeleteNote}\r\n            >Delete</button>\r\n            {isEditing && \r\n                <form action=\"\" className=\"editForm\" onSubmit={handleEditFormSubmit}>\r\n                    <textarea \r\n                        name=\"editBody\" \r\n                        id=\"editBody\" \r\n                        cols=\"30\" \r\n                        rows=\"10\"\r\n                        value={editedBody}\r\n                        onChange={(e) => {setEditedBody(e.target.value)}}\r\n                        \r\n                        >\r\n                    </textarea>\r\n                    <label htmlFor=\"colorSelect\">Select Note Color:</label>\r\n                <select name=\"colorSelect\" id=\"colorSelect\" onChange={(e) => setEditedNoteColor(e.target.value)} value={editedNoteColor}>\r\n                    <option value={note.color}>Select Color</option>\r\n                    <option value=\"lightcoral\">Red</option>\r\n                    <option value=\"lightblue\">Blue</option>\r\n                    <option value=\"lightgreen\">Green</option>\r\n                    <option value=\"violet\">Purple</option>\r\n                    <option value=\"orange\">Orange</option>\r\n                </select>\r\n                    <button className=\"submitEdit\">Submit Edit</button>\r\n                </form>\r\n            }\r\n        </div>\r\n        \r\n\r\n    )\r\n}\r\n\r\n\r\nexport default Note","import React, {useContext} from 'react';\r\nimport NoteContext from '../context/noteContext'\r\nimport Note from './Note'\r\n\r\nconst NoteList = () => {\r\n    const { notes } = useContext(NoteContext)\r\n\r\n    const displayNotes = note => {\r\n        return (\r\n            <>\r\n                <Note key={note.id} note={note} />\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='noteContainer'>\r\n            {notes.map(displayNotes)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NoteList;","const noteReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_NOTE':\r\n            console.log(state)\r\n            return [\r\n                ...state,\r\n                {\r\n                    title: action.title, \r\n                    body: action.body, \r\n                    id: action.id,\r\n                    color: action.color\r\n                }\r\n            ]\r\n\r\n        case 'DELETE_NOTE':\r\n            return state.filter( note => note.id !== action.id)\r\n\r\n        case 'EDIT_NOTE':\r\n            return state.map( note => {\r\n                if (note.id === action.id) {\r\n                    return {\r\n                        ...note,\r\n                        body: action.body,\r\n                        color: action.color\r\n                    }    \r\n                } else {\r\n                    return note\r\n                }\r\n            }) \r\n\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport default noteReducer","import React, {useReducer} from 'react';\nimport NoteForm from './Components/NoteForm'\nimport NoteList from './Components/NoteList'\nimport NoteContext from './context/noteContext'\nimport noteReducer from './reducers/noteReducer'\nimport './App.css';\n\nfunction App() {\n  const [notes, notesDispatch] = useReducer(noteReducer, [])\n\n  return (\n    <div className=\"App wrapper\">\n      <NoteContext.Provider value={{ notes, notesDispatch }}>\n        <NoteForm />\n        <NoteList />\n      </NoteContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}